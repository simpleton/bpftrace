//
// Copyright (C) 2019 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

cc_defaults {
    name: "bpftrace_defaults",
    header_libs: ["bpftrace_headers"],

    cflags: [
        "-Wno-format-security",
        "-Wno-implicit-fallthrough",
        "-Wno-unused-parameter",
        "-Wno-braced-scalar-init",
        "-DBPFTRACE_VERSION=\"v0.9.1-android\"",
        "-DHAVE_BCC_PROG_LOAD=1",
        "-DHAVE_BCC_CREATE_MAP=1",
    ],

    cppflags: [
        "-fexceptions",
    ],

    static_libs: [
        "libbccbpf",
    ],

    rtti: true,
}


cc_library_headers {
    name: "bpftrace_headers",
    export_include_dirs: [
        ".",
        "ast",
    ],
}

gensrcs {
    name: "bpftrace_lexer_sources",
    srcs: ["lexer.l"],
    cmd: "$(location flex) -o $(out) $(in)",
    output_extension: "cc",
    tools: ["flex"],
}

genrule {
    name: "bpftrace_parser_sources",
    srcs: ["parser.yy"],
    cmd: "$(location bison3) -o $(out) $(in)",
    out: [
        "parser.tab.cc",
    ],
    tools: ["bison3"],
}

genrule {
    name: "bpftrace_parser_headers",
    srcs: ["parser.yy"],
    cmd: "$(location bison3) -o $(genDir)/parser.tab.cc $(in)",
    out: [
        "location.hh",
        "parser.tab.hh",
        "position.hh",
        "stack.hh",
    ],
    tools: ["bison3"],
}

cc_library_static {
    name: "bpftrace_parser",
    defaults: ["bpftrace_defaults"],
    srcs: [],
    cflags: [
        "-Wno-implicit-fallthrough",
        "-Wno-unused-function",
    ],
    generated_sources: [
        "bpftrace_lexer_sources",
        "bpftrace_parser_sources",
    ],
    generated_headers: [
        "bpftrace_parser_headers",
    ],
    export_generated_headers: [
        "bpftrace_parser_headers",
    ],
}

cc_binary {
    name: "bpftrace",
    defaults: ["bpftrace_defaults"],
    srcs: ["*.cpp"],
    lto: {
        thin: true,
    },
    cflags: [
        "-Wno-extern-c-compat",

        // linux/compiler.h from libbpf collides with with the one provided by
        // bionic. Bionic version defines two macros and we need to define them
        // on our own.
        "-D__user=",
        "-D__force=",

        // linux/types.h from libbpf does not defile __poll_t
        "-D__poll_t=unsigned",
    ],
    static_libs: [
        "bpftrace_arch",
        "bpftrace_ast",
        "bpftrace_parser",
        "libbpf_bpftrace",
        "libclang8",
        "libelf",
        "libllvm8",
    ],
    shared_libs: [
        "libz",
    ],
    generated_sources: [
        "bpftrace_resources",
    ],
}
